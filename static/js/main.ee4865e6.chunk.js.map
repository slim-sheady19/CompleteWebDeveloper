{"version":3,"sources":["components/Card.js","components/Cardlist.js","robots.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","Cardlist","robots","cardsArray","map","user","i","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","console","log","target","value","searchfield","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAkBeA,EAhBF,SAACC,GAEV,OAEI,cADA,CACA,OAAKC,UAAU,sDAAf,UAEI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,cACrB,gCAEI,6BAAKJ,EAAMK,OACX,4BAAIL,EAAMM,eCaXC,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAMVC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACjC,OACA,cAAC,EAAD,CAEAR,GAAII,EAAOI,GAAGR,GACdC,KAAMG,EAAOI,GAAGP,KAChBC,MAAOE,EAAOI,GAAGN,OAHZM,MAMT,OACA,8BACKH,KCpBID,EAAS,CACpB,CACEJ,GAAI,EACJC,KAAM,gBACNQ,SAAU,OACVP,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,eACNQ,SAAU,YACVP,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACNQ,SAAU,WACVP,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNQ,SAAU,WACVP,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACNQ,SAAU,SACVP,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNQ,SAAU,mBACVP,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNQ,SAAU,eACVP,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNQ,SAAU,gBACVP,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNQ,SAAU,WACVP,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNQ,SAAU,iBACVP,MAAO,2BC5CIQ,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKd,UAAW,MAAhB,SACI,uBACAA,UAAW,mCACXe,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCEPI,G,MATA,SAACnB,GACZ,OAEI,aADA,CACA,OAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAArE,SACKvB,EAAMwB,aCiBJC,E,kDApBX,WAAYzB,GAAQ,IAAD,8BACf,cAAMA,IACD0B,MAAQ,CACTC,UAAU,GAHC,E,qDAQnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG9B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,2DAEHG,KAAK9B,MAAMwB,a,GAjBCQ,IAAMC,WC6DnBC,E,kDArDX,aAAe,IAAD,8BACV,gBAgBJC,eAAiB,SAACC,GACdC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKT,SAAS,CAAEU,YAAaL,EAAMG,OAAOC,SAjB1C,EAAKd,MAAQ,CACTlB,OAAQA,EACRiC,YAAa,IAJP,E,qDASd,WAAqB,IAAD,OAEhBC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKf,SAAS,CAACvB,OAAQsC,S,oBAU9C,WACI,MAA8BhB,KAAKJ,MAA5BlB,EAAP,EAAOA,OAAQiC,EAAf,EAAeA,YAITM,EAAiBvC,EAAOwC,QAAO,SAAAC,GACjC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASV,EAAYS,kBAIzD,OAFAb,QAAQC,IAAIS,GAEPvC,EAAO4C,OAIR,sBAAKnD,UAAU,KAAf,UACI,6CAEA,cAAC,EAAD,CAAWc,aAAce,KAAKK,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UAEI,cAAC,EAAD,CAAU3B,OAAQuC,WAVvB,6C,GApCDf,IAAMC,WCDxBoB,IAASC,OAEP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ee4865e6.chunk.js","sourcesContent":["import React from 'react'; //need to import React to use JSX for the pseudo HTML code below\r\n\r\nconst Card = (props) => {           //we can also destructure here by inserting name, email, id instead of props\r\n    //const {name, email, id } = props; //destructuring: this allows us to use the shorter variables name, email, id below instead of props.name etc\r\n    return (\r\n        //below is classes and syntax from tachyons\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            {/* IMPORTANT: ADDING VARIABLE INSIDE JSX STRING */}\r\n            <img alt='robots' src={`https://robohash.org/${props.id}?200x200`}/>\r\n            <div>\r\n                {/* add the properties dynamically */}\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({ robots }) => {\r\n    // if (true) { catch an error here\r\n    //     throw new Error('AHHHHH');\r\n    // }    \r\n\r\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\r\n    const cardsArray = robots.map((user, i)=> {\r\n        return (\r\n        <Card\r\n        key={i}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}/>\r\n        );\r\n    })\r\n    return (\r\n    <div>\r\n        {cardsArray}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;\r\n\r\n","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className ='pa2'>\r\n            <input\r\n            className ='pa3 ba b--green bg-lightest-blue'\r\n            type='search'\r\n            placeholder='search robots'\r\n            onChange={searchChange} />\r\n            {/* https://www.w3schools.com/jsref/event_onchange.asp */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        //we are writing style in line with JSX {{}} instead of creating a new file Scroll.css\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '1000px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    //this is like exception handling\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops!  Ran in to an error</h1>\r\n        }\r\n        return  this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport Cardlist from '../components/Cardlist';\r\nimport {robots} from '../robots'; //must destructure robots since robots.js does not export any default class\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nclass App extends React.Component { //App class declared here (child of React.Component class) has a state variable\r\n                                    //with props robots and searchfield accessible by all children\r\n    constructor() {\r\n        super()\r\n        this.state = {          //we use state here for user input to affect state of the app\r\n            robots: robots,\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    //this function is similar to Start or Awake in Unity.  it is called after the component is spawned\r\n    componentDidMount() {\r\n        //https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({robots: users}));\r\n    }\r\n\r\n    //this function updates the state of the searchbox\r\n    onSearchChange = (event) => { //we use the = (event) => in order to keep the this keyword used below pointing to the state object\r\n        console.log(event.target.value); //print the actual input rather than the signal being sent with .target.value\r\n        this.setState({ searchfield: event.target.value }) //need to use this.setState React method when we want to affect state props \r\n    }\r\n\r\n    //render function is always called when components have mounted and whenever a change in state is detected\r\n    render () {\r\n        const {robots, searchfield} = this.state; //destructure to use shorthand to access this.state.variables\r\n\r\n        //create array of robots that are filtered with the search field text and changed dynamically.\r\n        //it is created inside scope of render function to be accessed in return below\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        console.log(filteredRobots);\r\n        //show loading text while fetching robots.  the ! denotes null\r\n        if (!robots.length) {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n        return (\r\n            <div className='tc'>\r\n                <h1>RoboFriends</h1>\r\n                \r\n                <SearchBox searchChange={this.onSearchChange}/> \r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        {/* construct an object of class Cardlist called robots with argument filteredRobots */}\r\n                        <Cardlist robots={filteredRobots}/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n           )\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom'; //we specify React-DOM here because React can be used in many other types of software dev.  this one specifies for web & browsers\nimport './index.css';     //  ./ indicates the same directory.  so the same folder as index.js\n\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n  // https://reactjs.org/docs/strict-mode.html\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}